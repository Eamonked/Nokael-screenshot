{
  "info": {
    "name": "Security Incident Reporting System API",
    "description": "Complete API collection for testing the Security Incident Reporting System across all deployment modes (SaaS, Offline, Hybrid)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "security-incident-api-collection"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "admin_username",
      "value": "admin",
      "type": "string"
    },
    {
      "key": "admin_password",
      "value": "Admin123!",
      "type": "string"
    },
    {
      "key": "test_license_key",
      "value": "TEST-XXXX-YYYY-ZZZZ-1234",
      "type": "string"
    },
    {
      "key": "workstation_id",
      "value": "TEST-WORKSTATION-001",
      "type": "string"
    },
    {
      "key": "hostname",
      "value": "test-host-01",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for common setup",
          "console.log('Request to: ' + pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test script",
          "pm.test('Status code is 200 or 201', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
          "});",
          "",
          "pm.test('Response has JSON content type', function () {",
          "    pm.expect(pm.response.headers.get('content-type')).to.include('application/json');",
          "});",
          "",
          "pm.test('Response has success status', function () {",
          "    const response = pm.response.json();",
          "    pm.expect(response.status).to.eql('success');",
          "});"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('success');",
                  "    pm.expect(response.data).to.have.property('accessToken');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    ",
                  "    // Store JWT token for other requests",
                  "    if (response.data.accessToken) {",
                  "        pm.collectionVariables.set('jwt_token', response.data.accessToken);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{admin_username}}\",\n  \"password\": \"{{admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "License Management",
      "item": [
        {
          "name": "Activate License",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('License activation response', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    // Note: May fail if license already activated or invalid",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"license_key\": \"{{test_license_key}}\",\n  \"workstation_id\": \"{{workstation_id}}\",\n  \"hostname\": \"{{hostname}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/license/activate",
              "host": ["{{base_url}}"],
              "path": ["api", "license", "activate"]
            }
          },
          "response": []
        },
        {
          "name": "Check License Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/license/status?workstation_id={{workstation_id}}&license_key={{test_license_key}}",
              "host": ["{{base_url}}"],
              "path": ["api", "license", "status"],
              "query": [
                {
                  "key": "workstation_id",
                  "value": "{{workstation_id}}"
                },
                {
                  "key": "license_key",
                  "value": "{{test_license_key}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Licenses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/license",
              "host": ["{{base_url}}"],
              "path": ["api", "license"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Incident Management",
      "item": [
        {
          "name": "Create Incident",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Incident created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('success');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    ",
                  "    // Store incident ID for other tests",
                  "    if (response.data.id) {",
                  "        pm.collectionVariables.set('incident_id', response.data.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "area",
                  "value": "Test Area A1",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "Test incident from Postman collection",
                  "type": "text"
                },
                {
                  "key": "screenshot",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/incidents",
              "host": ["{{base_url}}"],
              "path": ["api", "incidents"]
            }
          },
          "response": []
        },
        {
          "name": "List Incidents",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/incidents?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "incidents"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Incident by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/incidents/{{incident_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "incidents", "{{incident_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Incident Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"in-progress\",\n  \"notes\": \"Updated via Postman test\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/incidents/{{incident_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["api", "incidents", "{{incident_id}}", "status"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Area Management",
      "item": [
        {
          "name": "List Areas",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/areas",
              "host": ["{{base_url}}"],
              "path": ["api", "areas"]
            }
          },
          "response": []
        },
        {
          "name": "Create Area",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Area B2\",\n  \"description\": \"Test area created via Postman\",\n  \"location\": \"Building B, Floor 2\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/areas",
              "host": ["{{base_url}}"],
              "path": ["api", "areas"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"TestPass123!\",\n  \"email\": \"test@example.com\",\n  \"role\": \"operator\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Audit Logs",
      "item": [
        {
          "name": "List Audit Logs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/audit?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "audit"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Audit Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/audit/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "audit", "stats"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Upload",
      "item": [
        {
          "name": "Upload Screenshot",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/upload",
              "host": ["{{base_url}}"],
              "path": ["api", "upload"]
            }
          },
          "response": []
        }
      ]
    }
  ]
} 