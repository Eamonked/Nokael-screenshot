version: '3.8'

# Security Incident Reporting System - Docker Compose
# Default configuration for SaaS deployment
# For offline/hybrid modes, use the specific compose files:
# - docker-compose.offline.yml
# - docker-compose.hybrid.yml

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: screenshot_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-screenshot_db}
      POSTGRES_USER: ${DB_USER:-screenshot_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    networks:
      - screenshot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-screenshot_user} -d ${DB_NAME:-screenshot_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: screenshot_backend
    restart: unless-stopped
    env_file:
      - ../backend/.env
    environment:
      # Override with deployment-specific settings
      DEPLOYMENT_MODE: ${DEPLOYMENT_MODE:-saas}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-screenshot_db}
      DB_USER: ${DB_USER:-screenshot_user}
      DB_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      DB_SSL: false
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_in_production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-2h}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_refresh_secret_key}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-5242880}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-image/jpeg,image/png,image/gif}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      SLOW_DOWN_DELAY_MS: ${SLOW_DOWN_DELAY_MS:-500}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001,http://localhost:3002}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS:-true}
      # Deployment-specific overrides
      LICENSE_MODE: ${LICENSE_MODE:-remote}
      TENANT_CONFIG: ${TENANT_CONFIG:-multi}
      SYNC_ENABLED: ${SYNC_ENABLED:-false}
      OFFLINE_MODE: ${OFFLINE_MODE:-false}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_backups:/app/backups
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - screenshot_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: screenshot_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - screenshot_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database backup service
  backup:
    image: postgres:15-alpine
    container_name: screenshot_backup
    restart: "no"
    environment:
      POSTGRES_DB: ${DB_NAME:-screenshot_db}
      POSTGRES_USER: ${DB_USER:-screenshot_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
    volumes:
      - ./backup:/backup
      - postgres_data:/var/lib/postgresql/data
    networks:
      - screenshot_network
    command: >
      sh -c "
        echo 'Starting database backup...' &&
        pg_dump -h postgres -U ${DB_USER:-screenshot_user} -d ${DB_NAME:-screenshot_db} > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql &&
        echo 'Backup completed successfully' &&
        find /backup -name 'backup_*.sql' -mtime +${BACKUP_RETENTION_DAYS:-30} -delete
      "

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_backups:
    driver: local
  nginx_logs:
    driver: local

networks:
  screenshot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 